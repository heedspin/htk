<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="HTK Comments v21"
    description=""
    height="200"
    scrolling="true"
    author="Tim Harrison"
    author_email="tharrison@lxdinc.com"
    author_location="Raleigh, NC">

    <!-- Declare feature dependencies. -->

    <Require feature="dynamic-height"/>
    <Require feature="google.contentmatch">
      <Param name="extractors">
        google.com:MessageIDExtractor,google.com:EmailTimeExtractor,google.com:SenderEmailExtractor,google.com:RecipientToEmailExtractor,google.com:RecipientCCEmailExtractor,google.com:SubjectExtractor,google.com:EmailBodyExtractor
      </Param>
    </Require>

  </ModulePrefs>

  <!-- Define the content type and display location. The settings
   "html" and "card" are required for all Gmail contextual gadgets. -->
  <Content type="html" view="card">
    <![CDATA[
      <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
      <script type="text/javascript">
        var container = $(document.createElement('div'));
        var statusMsg = $("<p>Loading...</p>");
        container.append(statusMsg);
        $('body').append(container);
        gadgets.window.adjustHeight();        
        var loginForm = null;

        function loginResponse(obj) {
          var rc = "";
          if (obj.rc) rc = obj.rc;
          if (rc == "401") {
            statusMsg.empty().append("Login failed.");
            promptLogin();
          } else if (rc == 200) {
            statusMsg.empty().append("Login successful!  Loading comments...");
            loadComments();
            gadgets.window.adjustHeight();
          } else {
            statusMsg.empty().append("Login error");
            gadgets.window.adjustHeight();
            console.log("Login response: " + JSON.stringify(obj));                    
          }
        }
        function sendLoginToHtk(login_email, login_password) {
          var params = {};
          params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
          params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
          params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
          params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({ email: login_email, password: login_password});
          gadgets.io.makeRequest("https://stk.lxdinc.com/api/v1/signed_request_users", loginResponse, params);        
        }
        function promptLogin() {
          if (!loginForm) {
            loginForm = $("<div id=\"dialog-form\" title=\"HTK Login\"><p>Please enter your HTK username (email) and password.</p><form><fieldset><label for=\"email\">Email</label><input type=\"text\" name=\"email\" id=\"email\" value=\"\" class=\"text ui-widget-content ui-corner-all\" /><label for=\"password\">Password</label><input type=\"password\" name=\"password\" id=\"password\" value=\"\" class=\"text ui-widget-content ui-corner-all\" /></fieldset><button id=\"login\">Login</button></form></div>");
            container.append(loginForm);
            $("#login").on('click', function(e) {
              e.preventDefault();
              loginForm.hide();
              var email = $("#email");
              var password = $("#password");
              sendLoginToHtk(email.val(), password.val());
              statusMsg.empty().append("Logging in to HTK as " + email.val()).show();
              gadgets.window.adjustHeight();
              email.val("");
              password.val("");
            });
          } else {
            loginForm.show();          
          }
          gadgets.window.adjustHeight();        
        }
        function commentsResponse(obj) {
          if (obj.rc && (obj.rc == "401")) {
            statusMsg.hide();
            promptLogin();
          } else if (obj.errors.length > 0) {
            statusMsg.empty().append("Error").show();
            console.log("Error response: " + JSON.stringify(obj));
            gadgets.window.adjustHeight();
          } else {
            statusMsg.empty().append("Victory").show();
            gadgets.window.adjustHeight();
            console.log("Result: " + JSON.stringify(obj.data));
          }
        }
        function loadComments() {
          var matches = google.contentmatch.getContentMatches();
          var all_data = new Object();
          for (var match in matches) {
            for (var key in matches[match]) {
              all_data[key] = matches[match][key];
            }
          }
          var params = {};
          params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
          params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
          params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
          params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(all_data);
          gadgets.io.makeRequest("https://stk.lxdinc.com/api/v1/comments", commentsResponse, params);
        }
        loadComments();
      </script>
    ]]>
  </Content>
</Module>