// touch234
function DeliverablesController(router) {
  HtkController.call(this, router);
  this.deliverableTree = new DeliverableTree(this);
  this.loadDeliverables();
  this.newView = null;
  this.editView = null;
}

DeliverablesController.prototype = Object.create(HtkController.prototype);

DeliverablesController.prototype.loadDeliverables = function() {
  var _this = this;
  this.setStatusMsg("Loading Deliverables...");
  adjust_window_height();
  var query_data = htkGetContentMatches(["date_sent", "sender_email", "message_id"]);
  htkLog("Load Deliverables Matches: " + JSON.stringify(query_data));
  Deliverable.prototype.all(query_data, {
    success : function(results) {
      htkLog("Load Deliverables: " + JSON.stringify(results.obj.data));
      if (results.deliverables.length == 0) {
        _this.router.loadCurrentEmail({
          success : function(results) {
            _this.renderDeliverables();
            adjust_window_height();
          }
        });
      } else {
        _this.deliverableTree.setDeliverables(results.deliverables);
        _this.router.currentEmail = results.email;
        _this.renderDeliverables();
        adjust_window_height();
      }
    },
    error : function(results) {
      if (results.obj.rc && (results.obj.rc == "404")) {
        htkLog("Email not found");
        _this.setStatusMsg("Email not processed by server yet");
      } else if (results.obj.errors.length > 0) {
        _this.setStatusMsg("Error");
        htkLog("Error response: " + JSON.stringify(results.obj));
        adjust_window_height();
      }
    }
  })
}
DeliverablesController.prototype.removeDeliverable = function(deliverable_id, delete_association) {
  this.deliverableTree.removeDeliverable(deliverable_id, delete_association);
  $(".htk-show > div[data-id=" + deliverable_id + "]").remove();
}
DeliverablesController.prototype.renderDeliverables = function() {
  this.deliverableTree.initializeTree(this.router.currentEmail.message_thread_id);
  this.showDeliverable();
  this.setStatusMsg("EAT-" + this.router.currentEmail.email_account_thread_id + " T-" + this.router.currentEmail.message_thread_id + " M-" + this.router.currentEmail.message_id);
  $("#htk-dcontainer").on("click", ".htka-nd", $.proxy(this.newDeliverable, this));
  $("#htk-col2").on("click", ".htk-edit", $.proxy(this.editDeliverable, this));
}
DeliverablesController.prototype.handleKeypress = function(e) {
  // Trap return key and click button.
  if(e.keyCode == 13) {
    $(this).find("button").click();
    e.preventDefault();
  }
}

DeliverablesController.prototype.getNewView = function() {
  if (!this.newView) {
    this.newView = $(HandlebarsTemplates['deliverables/new'](this));
    $("#htk-col2").append(this.newView);
    this.newView.find("form#create-deliverable button").click($.proxy(this.createEvent, this));
    this.newView.find(".parent-name-select").change(function(event) {
      var select = $(this);
      htkLog("parent changed to " + select.val());
      var form = select.closest("form");
      form.find("input[name=parent_name]").val("");
      form.find("input[name=parent_id]").val(select.val());
    });
    this.newView.bind('keypress', this.handleKeypress);
  }
  return this.newView;
}

DeliverablesController.prototype.updateOrDeleteEvent = function(event) {
  var button = $(event.target);
  var form = button.closest("form");
  var deliverable_id = form.attr("data-id");
  if (button.html() == "Save") {
    this.updateEvent(deliverable_id, form);
  } else {
    this.deleteEvent(deliverable_id);
  }
}

DeliverablesController.prototype.getEditView = function() {
  if (!this.editView) {
    this.editView = $(HandlebarsTemplates['deliverables/edit'](this));
    $("#htk-col2").append(this.editView);
    this.editView.find("form button").click($.proxy(this.updateOrDeleteEvent, this));
    // Toggle Save / Delete button.
    this.editView.find("form input.htk-action-delete").click(function() {
      var save_button = $(this).closest("form").find("button");
      if ($(this).is(":checked")) {
        save_button.html("Delete");
      } else {
        save_button.html("Save");     
      }
    });
    this.editView.bind('keypress', this.handleKeypress);
  }
  return this.editView;
}

DeliverablesController.prototype.editDeliverable = function(e) {
  $("#htk-col2").children().hide(); $("#htk-col3").children().hide();
  var view = this.getEditView();
  var edit_form = view.find("form");
  edit_form.resetForm();
  edit_form.find("button").html("Save");
  var deliverable = this.deliverableTree.getDeliverable($(event.target).closest(".htk-show").attr("data-id"));
  edit_form.attr("data-id", deliverable.id);
  edit_form.find("input[name=title]").val(deliverable.title);
  edit_form.find("textarea[name=description]").val(deliverable.description);
  view.show();
  adjust_window_height();
  view.find("input[name=title]").focus();
};

DeliverablesController.prototype.showDeliverable = function(deliverable) {
  $("#htk-col3").children().hide();
  if (!deliverable) {
    htkLog("showDeliverable called without deliverable.  Searching...");
  }
  if (!deliverable) deliverable = _.find(this.deliverableTree.deliverables, function(d) { return !d.isCompleted(); });
  if (!deliverable && this.deliverableTree.deliverables) deliverable = this.deliverableTree.deliverables[0];
  if (!deliverable) return;
  // htkLog("showDeliverable: " + deliverable.title);
  this.deliverableTree.selectDeliverable(deliverable.id);

  var need_to_create = true;
  var container = $("#htk-col2");
  container.children().each(function() {
    var _this = $(this);
    if (_this.attr("id") == deliverable.id) {
      _this.show();
      need_to_create = false;
    } else if (_this.attr("id") != "htk-action-nd") {
      _this.hide();
    }
  });
  if (need_to_create) {
    var show_view = $(HandlebarsTemplates['deliverables/show']({ current_user: this.router.currentUser, deliverable: deliverable, parent: deliverable.getParent() }));
    container.append(show_view);
  }
  adjust_window_height();
}

DeliverablesController.prototype.newDeliverable = function(event) {
  var _this = this;
  $("#htk-col2").children().hide(); $("#htk-col3").children().hide();
  var view = this.getNewView();
  var form = view.find("form");
  form.resetForm();
  var options = $(HandlebarsTemplates["deliverables/options"]({placeholder : "Select Parent", deliverables: this.deliverableTree.deliverables}));
  form.find(".parent-name-select").empty().append(options);
  view.show();
  adjust_window_height();
  view.find("input[name=title]").focus();
}

DeliverablesController.prototype.createEvent = function(event) {
  htkLog("DeliverablesController.createEvent");
  var _this = this;
  var form = $(event.target).closest("form");
  if (form.find("input[name=title]").val()) {
    var matches = htkGetContentMatches().concat(form.formToNameValues());
    var parent_id = _.find(matches, function(nv) { return nv.parent_id });
    if (parent_id) parent_id = parent_id.parent_id;
    htkLog("createDeliverable: " + JSON.stringify(matches));
    var deliverable = new Deliverable(matches);
    deliverable.save({
      success : function(results) {
        var savedDeliverable = results.deliverable;
        htkLog("Created new deliverable: " + JSON.stringify(results.obj.data));
        _this.deliverableTree.createNode(parent_id, savedDeliverable, {
          success : function(results) {
            _this.showDeliverable(savedDeliverable);            
          }
        });
      }, 
      error : function(results) {
        _this.setStatusMsg("Create deliverable failed.");
        adjust_window_height();
        htkLog("Create deliverable response: " + JSON.stringify(results.obj));
      }
    })
  } else {
    htkLog("DeliverablesController.createEvent: no title");
  }
}

DeliverablesController.prototype.deliverableChanged = function(results) {
  var deliverable_update = results.obj.data['deliverable'];
  if (deliverable_update) {
    var deliverable = this.deliverableTree.getDeliverable(deliverable_update["id"]);
    if (deliverable) {
      deliverable.write_attributes(deliverable_update);
      deliverable.reset_changes();
      var show_view = $(HandlebarsTemplates['deliverables/show']({ current_user: this.router.currentUser, deliverable: deliverable }));
      $("#htk-col2").children("[data-id=" + deliverable.id + "]").replaceWith(show_view);
    }
  }
}
DeliverablesController.prototype.updateEvent = function(deliverable_id, form) {
  var _this = this;
  var nameValues = form.formToNameValues();
  htkLog("updating deliverable " + deliverable_id + " with " + JSON.stringify(nameValues));
  var deliverable = this.deliverableTree.getDeliverable(deliverable_id);
  deliverable.write_attributes(nameValues);
  deliverable.save({
    success : function(results) {
      htkLog("Putting deliverable succeeded");
      _this.deliverableTree.deliverableChanged(deliverable);
      _this.showDeliverable(deliverable);
    }
  });
}
DeliverablesController.prototype.deleteEvent = function(deliverable_id) {
  var _this = this;
  htkRequest("DELETE", "/api/v1/deliverables/" + deliverable_id, null, function(obj) {
    var rc = "";
    if (obj.rc) rc = obj.rc;
    if (rc == 200) {
      htkLog("Delete deliverable succeeded");
      _this.removeDeliverable(deliverable_id, false);
      _this.showDeliverable();
    } else {
      log("Deleting comment failed");
    }
  });
}


