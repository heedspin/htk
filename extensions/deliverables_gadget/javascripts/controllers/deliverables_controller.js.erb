// touch2
function DeliverablesController(router) {
  HtkController.call(this, router);
  this.deliverableTemplate = Handlebars.compile("<%= insert_file('html/deliverable.html.erb', :javascript_escape => true) %>");
  this.deliverableOptionsTemplate = Handlebars.compile("<option value=\"\">{{placeholder}}</option>{{#each deliverables}}<option value=\"{{id}}\">{{title}}</option>{{/each}}");
  this.deliverableTree = new DeliverableTree(this);
  this.loadDeliverables();
}

DeliverablesController.prototype = Object.create(HtkController.prototype);

DeliverablesController.prototype.loadDeliverables = function() {
  var _this = this;
  this.setStatusMsg("Loading Deliverables...");
  adjust_window_height();
  var query_data = htkGetContentMatches(["date_sent", "sender_email", "message_id"]);
  htkLog("Load Deliverables Matches: " + JSON.stringify(query_data));
  Deliverable.prototype.all(query_data, {
    success : function(results) {
      htkLog("Load Deliverables: " + JSON.stringify(results.obj.data));
      _this.deliverableTree.deliverables = results.deliverables;
      _this.deliverableTree.relations = results.deliverable_relations;
      _this.deliverableTree.associateRelations();
      _this.router.currentEmail = results.email;
      _this.renderDeliverables();
      adjust_window_height();
    },
    error : function(results) {
      if (results.obj.rc && (results.obj.rc == "404")) {
        htkLog("Email not found");
        _this.setStatusMsg("Email not processed by server yet");
      } else if (results.obj.errors.length > 0) {
        _this.setStatusMsg("Error");
        htkLog("Error response: " + JSON.stringify(results.obj));
        adjust_window_height();
      }
    }
  })
}
DeliverablesController.prototype.removeDeliverable = function(deliverable_id) {
  this.deliverableTree.removeDeliverable(deliverable_id);
  $(".htk-show > div[data-id=" + deliverable_id + "]").remove();
}
DeliverablesController.prototype.renderDeliverables = function() {
  this.deliverableTree.initializeTree();
  this.showDeliverable();
  this.setStatusMsg("EAT-" + this.router.currentEmail.email_account_thread_id + " T-" + this.router.currentEmail.message_thread_id + " M-" + this.router.currentEmail.message_id);
  this.setupDeliverablesEvents();
}
DeliverablesController.prototype.setupDeliverablesEvents = function() {
  var _this = this;
  $("#htk-action-nd").click($.proxy(this.newDeliverable, this));
  $("#htk-col2").on("click", ".htk-edit", $.proxy(this.editDeliverable, this));
  $("#htkv-nd > form#create-deliverable > button").click($.proxy(this.createEvent, this));
  $("form#find-deliverable > button").click($.proxy(this.associateEvent, this));
  $("#htkv-ed > form > button").click($.proxy(this.updateOrDeleteEvent, this));
  // Toggle Save / Delete button.
  $("#htkv-ed > form > input.htk-action-delete").click(function() {
    var save_button = $(this).siblings("button");
    if ($(this).is(":checked")) {
      save_button.html("Delete");
    } else {
      save_button.html("Save");     
    }
  });
  $(".parent-name-select").change(function(event) {
    htkLog("parent changed to " + $(this).val());
    var select = $(this);
    select.siblings("input[name=parent_name]").val("");
    select.siblings("input[name=parent_id]").val(select.val());
  });
  $("#htkv-nd > form > input[name='deliverable_name']").autocomplete({
    source: function(request, response) {
      htkRequest("GET", "/api/v1/deliverables?term=" + request.term, null, function(obj) {
        if (obj.errors.length > 0) {
          _this.statusMsg.empty().append("Error").show();
          htkLog("Error response: " + JSON.stringify(obj));
        } else {
          htkLog("deliverables autocomplete: " + JSON.stringify(obj.data));
          response(obj.data);
        }    
      });
    },
    select: function(event, ui) { 
      var input = $(this);
      input.val(ui.item.label); 
      htkLog("deliverable selected: " + ui.item.label + " - " + ui.item.value);
      input.siblings(".parent-name-select").val("");
      input.siblings("input[name=deliverable_id]").val(ui.item.value);
      return false; 
    }
  });
  $("#deliverable-name-select").change(function(event) {
    htkLog("associate deliverable changed to " + $(this).val());
    var select = $(this);
    select.siblings("input[name=deliverable_name]").val("");
    select.siblings("input[name=deliverable_id]").val(select.val());
  });  
};

DeliverablesController.prototype.updateOrDeleteEvent = function(event) {
  var button = $(event.target);
  var form = button.parent();
  var deliverable_id = form.attr("data-id");
  if (button.html() == "Save") {
    this.updateEvent(deliverable_id, form);
  } else {
    this.deleteEvent(deliverable_id);
  }
}

DeliverablesController.prototype.editDeliverable = function(e) {
  $("#htk-col2").children().hide(); $("#htk-col3").children().hide();
  var view = $("#htkv-ed");
  var edit_form = view.find("form");
  edit_form.resetForm();
  edit_form.find("button").html("Save");
  var deliverable = this.deliverableTree.getDeliverable($(event.target).closest(".htk-show").attr("data-id"));
  edit_form.attr("data-id", deliverable.id);
  edit_form.find("input[name=title]").val(deliverable.title);
  edit_form.find("textarea[name=description]").val(deliverable.description);
  var options = $(this.deliverableOptionsTemplate({placeholder : "Select Parent", deliverables: _.reject(this.deliverableTree.deliverables, function(d) { return d.id == deliverable.id; })}));
  var parent_select = edit_form.children(".parent-name-select");
  parent_select.empty().append(options);
  if (deliverable.parent) {
    parent_select.val(deliverable.parent.id);
  }
  view.show();
};

DeliverablesController.prototype.showDeliverable = function(deliverable) {
  $("#htk-col3").children().hide();
  if (!deliverable) {
    htkLog("showDeliverable called without deliverable.  Searching...");
  }
  if (!deliverable) deliverable = _.find(this.deliverableTree.deliverables, function(d) { return !d.isCompleted(); });
  if (!deliverable) deliverable = this.deliverableTree.deliverables[0];
  htkLog("showDeliverable: " + deliverable.title);
  this.deliverableTree.selectDeliverable(deliverable.id);

  var need_to_create = true;
  var container = $("#htk-col2");
  container.children().each(function() {
    var _this = $(this);
    if (_this.attr("id") == deliverable.id) {
      _this.show();
      need_to_create = false;
    } else if (_this.attr("id") != "htk-action-nd") {
      _this.hide();
    }
  });
  if (need_to_create) {
    var show_view = $(this.deliverableTemplate({ current_user: this.router.currentUser, deliverable: deliverable }));
    deliverable.showView = show_view;
    container.append(show_view);
  }
}

DeliverablesController.prototype.newDeliverable = function(event) {
  var _this = this;
  $("#htk-col2").children().hide(); $("#htk-col3").children().hide();
  var view = $("#htkv-nd");
  var form = view.find("form");
  form.resetForm();
  var options = $(this.deliverableOptionsTemplate({placeholder : "Select Parent", deliverables: this.deliverableTree.deliverables}));
  form.children(".parent-name-select").empty().append(options);
  Deliverable.prototype.recent({ exclude : _.map(this.deliverableTree.deliverables, function(d) { return d.id; }) }, {
    success : function(results) {
      htkLog("deliverables recent: " + JSON.stringify(results.deliverables));
      var options = $(_this.deliverableOptionsTemplate({placeholder : "Choose Recent Deliverable", deliverables: results.deliverables}));
      form.children("#deliverable-name-select").empty().append(options);
    },
    error : function(results) {
      _this.setStatusMsg("Error");
      htkLog("Error response: " + JSON.stringify(results.obj));
    }
  })
  view.show();
}

DeliverablesController.prototype.createEvent = function(event) {
  var _this = this;
  var form = $(event.target).parent();
  if (form.find("input[name=title]").val()) {
    var matches = htkGetContentMatches().concat(form.formToNameValues());
    htkLog("createDeliverable: " + JSON.stringify(matches));
    var deliverable = new Deliverable(matches);
    deliverable.save({
      success : function(results) {
        htkLog("Created new deliverable: " + JSON.stringify(results.obj.data));
        _this.deliverableTree.addDeliverable(deliverable);
        _this.showDeliverable(deliverable);
        adjust_window_height();
      }, 
      error : function(results) {
        _this.setStatusMsg("Create deliverable failed.");
        adjust_window_height();
        htkLog("Create deliverable response: " + JSON.stringify(results.obj));
      }
    })
  }
}

DeliverablesController.prototype.associateEvent = function(event) {
  var _this = this;
  var form = $(event.target).parent();
  var deliverable_id = form.find("input[name=deliverable_id]").val();
  if (deliverable_id) {
    var matches = htkGetContentMatches(["date_sent", "sender_email", "message_id"]);
    htkLog("associateDeliverable: " + deliverable_id + " to " + JSON.stringify(matches));
    this.router.getCurrentEmail({
      success : function(email) {
        var thread_deliverable = new ThreadDeliverable({ 
          deliverable_id : deliverable_id, 
          message_thread_id : email.message_thread_id
        });
        thread_deliverable.save({
          success : function(results) {
            htkLog("Association succeeded");
            Deliverable.prototype.find(deliverable_id, {
              success : function(results) {
                _this.deliverableTree.addDeliverable(results.deliverable);
                _this.showDeliverable(results.deliverable);
              }
            });
          }
        });
      },
      error : function(obj) {
        htkLog("Failed to get current email.  Must not be loaded yet...");
      }
    });
  }
}

DeliverablesController.prototype.deliverableChanged = function(results) {
  var deliverable_update = results.obj.data['deliverable'];
  if (deliverable_update) {
    var deliverable = this.deliverableTree.getDeliverable(deliverable_update["id"]);
    if (deliverable) {
      deliverable.update_attributes(deliverable_update);
      this.deliverableTree.deliverableChanged(deliverable);
      var show_view = $(this.deliverableTemplate({ current_user: this.router.currentUser, deliverable: deliverable }));
      deliverable.showView.replaceWith(show_view);
      deliverable.showView = show_view;
    }
  }
}
DeliverablesController.prototype.updateEvent = function(deliverable_id, form) {
  var _this = this;
  var nameValues = form.formToNameValues();
  htkLog("updating deliverable " + deliverable_id + " with " + JSON.stringify(nameValues));
  var deliverable = this.deliverableTree.getDeliverable(deliverable_id);
  deliverable.update_attributes(nameValues);
  deliverable.save({
    success : function(results) {
      htkLog("Putting deliverable succeeded");
      $(".htk-show[data-id=" + deliverable_id + "]").remove();
      _this.showDeliverable(deliverable);
    },
    error : function(results) {
      htkLog("Updating deliverable failed");
    }
  })
}
DeliverablesController.prototype.deleteEvent = function(deliverable_id) {
  var _this = this;
  htkRequest("DELETE", "/api/v1/deliverables/" + deliverable_id, null, function(obj) {
    var rc = "";
    if (obj.rc) rc = obj.rc;
    if (rc == 200) {
      htkLog("Delete deliverable succeeded");
      _this.removeDeliverable(deliverable_id);
      _this.showDeliverable();
    } else {
      log("Deleting comment failed");
    }
  });
}


