function Deliverable(attributes, deliverable_users) {
	HtkModel.call(this, attributes);
	this.owner = null;
	this.responsible = null;
	this.listItem = null;
	this.showView = null;
	this.parent = null;
	this.children = [];
	this.set_users(deliverable_users);
}

Deliverable.prototype = Object.create(HtkModel.prototype, {
	api_url : {	value : function(){ return "/api/v1/deliverables"; } },
	single_key : { value : "deliverable" },
	collection_key : { value : "deliverables" },
	attribute_keys : { value : <%= (Deliverable.columns.map(&:name) + ['parent_id']).to_json %> },
	extract_collection : {
		value : function(obj) {
		  var results = {
		  	email : obj.data['email'],
		  	users : obj.data['users'],
		  	deliverable_users : [],
		  	deliverables : [],
		  	deliverable_relations : [],
		  	obj : obj
		  };
		  _.each(obj.data['deliverable_users'], function(du) {
		    results.deliverable_users.push(new DeliverableUser(du, results.users));
		  });
		  _.each(obj.data["deliverables"] || obj.data["deliverable"], function(d) {
		    results.deliverables.push(new Deliverable(d, results.deliverable_users));
		  });
		  _.each(obj.data["deliverable_relations"], function(r) {
		    results.deliverable_relations.push(new DeliverableRelation(r));
		  });
		  return results;
		}
	},
	extract_single : {
		value : function(obj) {
			htkLog("Deliverable.extract_single: " + JSON.stringify(obj));
			var _self = this;
		  var results = {
		  	email : obj.data['email'],
		  	users : obj.data['users'],
		  	deliverable_users : [],
		  	deliverable : _self,
		  	deliverable_relations : [],
		  	obj : obj
		  };
		  _.each(obj.data['deliverable_users'], function(du) {
		    results.deliverable_users.push(new DeliverableUser(du, results.users));
		  });
		  _.each(obj.data["deliverable_relations"], function(r) {
		  	// HOW TO PROPOGATE NEW AND DELETED RELATION?
		    results.deliverable_relations.push(new DeliverableRelation(r));
		  });
		  var deliverable_updates = obj.data['deliverable'];
		  if (deliverable_updates) results.deliverable.update_attributes(deliverable_updates);
	    return results;
		}
	},
	set_users : {
		value : function(deliverable_users) {
			var d = this;
			_.each(deliverable_users, function(du) {
				if (du.deliverable_id == d.id) {
					if (du.access == "owner") {
						d.owner = du.user;
					}
					if (du.responsible) {
						d.responsible = du.user;
					}
				}
			});
		}
	},
	set_relations : { 
		value : function(deliverable_relations) {
			var d = this;
			_.each(deliverable_relations, function(r) {
				if (r.source_deliverable_id == d.id && r.relation_type == DeliverableRelation.prototype.parent_relation_type)  {
					d.children.push(r.target_deliverable);
				} else if (r.target_deliverable_id == d.id && r.relation_type == DeliverableRelation.prototype.parent_relation_type) {
					d.parent = r.source_deliverable;
				}
			})
		}
	},
	update_attribute : {
		value : function(key, value) {
			HtkModel.prototype.update_attribute.apply(this, [key, value]);
			if (key == 'title') {
			  $("#htk-dlist").find("li[data-id=" + this.id + "] span.htk-title").html(this.title);
			}
		}
	},
	isCompleted : {
		value : function() {
			return this.completed_by_id != null;
		}
	}
});

Deliverable.prototype.recent = function(query_data, callbacks) {
	var _self = this;
	htkRequest("GET", this.api_url() + "/recent", query_data, function(obj) {
		var results = _self.extract_collection(obj);
	  if (obj.rc && obj.rc == 200) {
	  	if (callbacks && callbacks.success && typeof(callbacks.success) === "function") {  
	  		callbacks.success(results);
			}
	  } else {
	  	if (callbacks && callbacks.error && typeof(callbacks.error) === "function") {  
	  		callbacks.error(results);
			}
	  }
	});
}
