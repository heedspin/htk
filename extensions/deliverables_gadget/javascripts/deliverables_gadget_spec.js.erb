// ping12345
var currentDeliverables = null;
var currentUser = null;
var currentEmail = null;
var currentDeliverableUsers = null;
var currentUsers = null;
var deliverablesTemplate = Handlebars.compile("<%= insert_file('html/deliverables.html.erb', :javascript_escape => true) %>");
var deliverableTemplate = Handlebars.compile("<%= insert_file('html/deliverable.html', :javascript_escape => true) %>");
var deliverableLiTemplate = Handlebars.compile("<%= insert_file('html/deliverable_li.html', :javascript_escape => true) %>");
var selectedDeliverableTemplate = Handlebars.compile("<%= insert_file('html/selected_deliverable.html', :javascript_escape => true) %>");
var selectedDeliverable = null;

function htkLoadGadget() {
  getCurrentUser();
}

function getCurrentUser() {
  htkRequest("GET", "/api/v1/users/current", null, function(obj) {
    if (obj.rc && (obj.rc == "401")) {
      htkStatusMsg.hide();
      htkPromptLogin();
    } else if (obj.errors.length > 0) {
      htkStatusMsg.empty().append("Error").show();
      htkLog("Error response: " + JSON.stringify(obj));
      adjust_window_height();
    } else {
      currentUser = obj.data["user"];
      htkLog("Current user: " + JSON.stringify(currentUser));
      loadDeliverables();
    }    
  })
}
function getDeliverable(deliverable_id) {
  if (!currentDeliverables) return null;
  for (var i=0; i < currentDeliverables.length; i++) {
    var deliverable = currentDeliverables[i];
    if (deliverable.id == deliverable_id) return deliverable;
  }
  return null;
}
function parseDeliverablesJson(obj) {
  new_deliverables = new Array();
  currentEmail = obj.data['email'];
  currentUsers = obj.data['users'];
  currentDeliverableUsers = new Array();
  _.each(obj.data['deliverable_users'], function(du) {
    currentDeliverableUsers.push(new DeliverableUser(du, currentUsers));
  })
  if (!currentDeliverables) currentDeliverables = new Array();
  var deliverables = obj.data["deliverables"];
  if (!deliverables) deliverables = [ obj.data["deliverable"] ];
  _.each(deliverables, function(d) {
    var new_deliverable = new Deliverable(d, currentDeliverableUsers);
    currentDeliverables.push(new_deliverable);
    new_deliverables.push(new_deliverable);
  });
  return new_deliverables;
}
function loadDeliverables() {
  var query_data = htkGetContentMatches(["date_sent", "sender_email", "'message_id"]);
  htkLog("Load Deliverables Matches: " + JSON.stringify(query_data));
  var handleGetDeliverables = function(obj) {
    if (obj.rc && (obj.rc == "404")) {
      htkLog("Email not found");
      htkStatusMsg.empty().append("Email not processed by server yet");
    } else if (obj.errors.length > 0) {
      htkStatusMsg.empty().append("Error").show();
      htkLog("Error response: " + JSON.stringify(obj));
      adjust_window_height();
    } else {
      htkLog("Load Deliverables: " + JSON.stringify(obj.data));
      parseDeliverablesJson(obj)
      renderDeliverables();
      // statusMsg.empty().append("Victory").show();
      adjust_window_height();
    }
  }
  htkRequest("GET", "/api/v1/deliverables", query_data, handleGetDeliverables);

  htkStatusMsg.empty().append("Done").show();
  adjust_window_height();
}

function renderDeliverables() {
  var deliverables_container = htkContainer.find("#deliverables");
  if (deliverables_container.length == 0) {
    deliverables_container = $("<div id=\"deliverables\"></div>");
    htkContainer.append(deliverables_container);
  }
  deliverables_container.replaceWith($(deliverablesTemplate({ current_user: currentUser })));
  var deliverables_list = $("#htk-dlist");
  _.each(currentDeliverables, function (deliverable) {
    deliverables_list.append($(deliverableLiTemplate({ deliverable: deliverable })));
  });
  if (!selectedDeliverable) setSelectedDeliverable(currentDeliverables[0]);
  showSelectedDeliverable();
  // html = selectedDeliverableTemplate({ current_user: currentUser, deliverable: selectedDeliverable });
  // var details = $(html);
  // $("#htk-details").append(details);
  htkStatusMsg.empty().append("EAT-" + currentEmail.email_account_thread_id + " T-" + currentEmail.message_thread_id + " M-" + currentEmail.message_id);
  setupDeliverablesMarkup();
}

function deliverablesGadgetReady() {
  htkContainer = $("#htkContainer");
  if (htkContainer.size() == 0) {
    htkContainer = $("<div id=\"htkContainer\"></div>");    
    $('body').append(htkContainer);
  }
  htkStatusMsg = $("<p>Loading Deliverables...</p>");
  htkContainer.append(htkStatusMsg);
  adjust_window_height();
  htkLoadGadget();  
}

function setupDeliverablesMarkup() {
  $("#htk-dlist").on("click", ".htk-action-sd", function() {
    setSelectedDeliverable(getDeliverable($(this).parent().attr("data-id")));
    showSelectedDeliverable();
  });
  $("#htk-action-nd").click(function() {
    $("#htk-details").children().hide();
    $("#htk-form-nd").show();
  });
  $("#htk-form-nd > button").click(createDeliverable);
};
function showSelectedDeliverable() {
  var details = $("#htk-details");
  details.children().hide();
  var deliverable_details = details.find("#htk-detail-" + selectedDeliverable.id);
  if (deliverable_details.size() > 0) {
    deliverable_details.show();
  } else {
    var html = deliverableTemplate({ current_user: currentUser, deliverable: selectedDeliverable });
    new_details = $(html);
    details.append(new_details);
    // Register callbacks.
  }
}
function createDeliverable() {
  var deliverable_title_input = $(this).parent().find("input");
  var deliverable_title = deliverable_title_input.val();
  if (deliverable_title) {
    var matches = htkGetContentMatches();
    htkLog("createDeliverable: " + JSON.stringify(matches));
    matches.push({title: deliverable_title});
    htkRequest("POST", "/api/v1/deliverables", matches, function(obj) {
      var rc = "";
      if (obj.rc) rc = obj.rc;
      if (rc == 200) {
        htkLog("Created new deliverable: " + JSON.stringify(obj.data))
        deliverable_title_input.val("");
        var new_deliverables = parseDeliverablesJson(obj);
        $("#htk-dlist").append($(deliverableLiTemplate({ deliverable: new_deliverables[0] })));
          // var new_deliverable = obj.data["deliverable"];
        // if (currentDeliverables && new_deliverable) {
        //   currentDeliverables.unshift(new_deliverable);
        //   renderDeliverables();
        // }
        adjust_window_height();
      } else {
        htkStatusMsg.empty().append("Create deliverable failed.");
        adjust_window_height();
        htkLog("Create deliverable response: " + JSON.stringify(obj));
      }
    });
  }
}

function setSelectedDeliverable(sd) {
  _.each(currentDeliverables, function(deliverable) {
    deliverable.isSelected = false;
  });
  sd.isSelected = true;
  selectedDeliverable = sd;
  $(".htk-d").each(function() {
    var li = $(this);
    if (li.attr("data-id") == sd.id) {
      li.addClass("selected");
    } else {
      li.removeClass("selected");
    }
  });

}