// touch123
var currentDeliverables = null;
var currentUser = null;
var currentEmail = null;
var currentDeliverableUsers = null;
var currentUsers = null;
var deliverablesTemplate = Handlebars.compile("<%= insert_file('html/deliverables.html.erb', :javascript_escape => true) %>");
var deliverableTemplate = Handlebars.compile("<%= insert_file('html/deliverable.html.erb', :javascript_escape => true) %>");
var deliverableLiTemplate = Handlebars.compile("<%= insert_file('html/deliverable_li.html', :javascript_escape => true) %>");
var selectedDeliverableTemplate = Handlebars.compile("<%= insert_file('html/selected_deliverable.html', :javascript_escape => true) %>");
var selectedDeliverable = null;

function htkLoadGadget() {
  getCurrentUser();
}

function getCurrentUser() {
  htkRequest("GET", "/api/v1/users/current", null, function(obj) {
    if (obj.rc && (obj.rc == "401")) {
      htkStatusMsg.hide();
      htkPromptLogin();
    } else if (obj.errors.length > 0) {
      htkStatusMsg.empty().append("Error").show();
      htkLog("Error response: " + JSON.stringify(obj));
      adjust_window_height();
    } else {
      currentUser = obj.data["user"];
      htkLog("Current user: " + JSON.stringify(currentUser));
      loadDeliverables();
    }    
  })
}
function getDeliverable(deliverable_id) {
  var deliverable = _.find(currentDeliverables, function(deliverable) {
    return (deliverable.id == deliverable_id);
  });
  // htkLog("getDeliverable " + deliverable_id + " = " + JSON.stringify(deliverable));
  return deliverable;
}
function parseDeliverablesJson(obj) {
  new_deliverables = new Array();
  currentEmail = obj.data['email'];
  currentUsers = obj.data['users'];
  currentDeliverableUsers = new Array();
  _.each(obj.data['deliverable_users'], function(du) {
    currentDeliverableUsers.push(new DeliverableUser(du, currentUsers));
  })
  if (!currentDeliverables) currentDeliverables = new Array();
  var deliverables = obj.data["deliverables"];
  if (!deliverables) deliverables = [ obj.data["deliverable"] ];
  _.each(deliverables, function(d) {
    var new_deliverable = new Deliverable(d, currentDeliverableUsers);
    currentDeliverables.push(new_deliverable);
    new_deliverables.push(new_deliverable);
  });
  return new_deliverables;
}
function loadDeliverables() {
  var query_data = htkGetContentMatches(["date_sent", "sender_email", "'message_id"]);
  htkLog("Load Deliverables Matches: " + JSON.stringify(query_data));
  var handleGetDeliverables = function(obj) {
    if (obj.rc && (obj.rc == "404")) {
      htkLog("Email not found");
      htkStatusMsg.empty().append("Email not processed by server yet");
    } else if (obj.errors.length > 0) {
      htkStatusMsg.empty().append("Error").show();
      htkLog("Error response: " + JSON.stringify(obj));
      adjust_window_height();
    } else {
      htkLog("Load Deliverables: " + JSON.stringify(obj.data));
      parseDeliverablesJson(obj)
      renderDeliverables();
      // statusMsg.empty().append("Victory").show();
      adjust_window_height();
    }
  }
  htkRequest("GET", "/api/v1/deliverables", query_data, handleGetDeliverables);

  htkStatusMsg.empty().append("Done").show();
  adjust_window_height();
}

function renderDeliverables() {
  var deliverables_container = htkContainer.find("#deliverables");
  if (deliverables_container.length == 0) {
    deliverables_container = $("<div id=\"deliverables\"></div>");
    htkContainer.append(deliverables_container);
  }
  deliverables_container.replaceWith($(deliverablesTemplate({ current_user: currentUser })));
  _.each(currentDeliverables, function (deliverable) {
    $(deliverableLiTemplate({ deliverable: deliverable })).insertBefore($("#htk-action-nd"));
  });
  showDeliverable();
  // html = selectedDeliverableTemplate({ current_user: currentUser, deliverable: selectedDeliverable });
  // var details = $(html);
  // $("#htk-details").append(details);
  htkStatusMsg.empty().append("EAT-" + currentEmail.email_account_thread_id + " T-" + currentEmail.message_thread_id + " M-" + currentEmail.message_id);
  setupDeliverablesEvents();
}

function deliverablesGadgetReady() {
  htkContainer = $("#htkContainer");
  if (htkContainer.size() == 0) {
    htkContainer = $("<div id=\"htkContainer\"></div>");    
    $('body').append(htkContainer);
  }
  htkStatusMsg = $("<p>Loading Deliverables...</p>");
  htkContainer.append(htkStatusMsg);
  adjust_window_height();
  htkLoadGadget();  
}

function setupDeliverablesEvents() {
  $("#htk-dlist").on("click", ".htk-action-sd", function() {
    showDeliverable(getDeliverable($(this).parent().attr("data-id")));
  });
  $("#htk-action-nd").click(function() {
    $("#htk-details").children().hide();
    $("#htk-form-nd").show();
  });
  $("#htk-details").on("click", ".htk-action-ed", editDeliverable);
  $("#htk-form-nd > button").click(createDeliverable);
  $("#htk-form-ed > button").click(function() {
    var button = $(this);
    var form = button.parent();
    var deliverable_id = form.attr("data-id");
    if (button.html() == "Save") {
      updateDeliverable(deliverable_id, form);
    } else {
      deleteDeliverable(deliverable_id);
      button.html("Save");
    }
  });
  // Toggle Save / Delete button.
  $("#htk-form-ed input.htk-action-delete").click(function() {
    var save_button = $(this).siblings("button");
    if ($(this).is(":checked")) {
      save_button.html("Delete");
    } else {
      save_button.html("Save");     
    }
  });
};
function editDeliverable() {
  $("#htk-details").children().hide();
  var edit_form = $("#htk-form-ed");
  var deliverable = getDeliverable($(this).parent().attr("data-id"));
  edit_form.attr("data-id", deliverable.id);
  edit_form.find("input[name=title]").val(deliverable.title);
  edit_form.find("textarea[name=description]").val(deliverable.description);
  edit_form.show();
};
function showDeliverable(deliverable) {
  if (!deliverable) deliverable = currentDeliverables[0];
  _.each(currentDeliverables, function(d) {
    d.isSelected = false;
  });
  deliverable.isSelected = true;
  selectedDeliverable = deliverable;
  $(".htk-d").each(function() {
    var li = $(this);
    if (li.attr("data-id") == deliverable.id) {
      li.addClass("selected");
    } else {
      li.removeClass("selected");
    }
  });

  var need_to_create = true;
  var details = $("#htk-details");
  details.children().each(function() {
    var _this = $(this);
    if (_this.attr("id") == deliverable.id) {
      _this.show();
      need_to_create = false;
    } else if (_this.attr("id") != "htk-action-nd") {
      _this.hide();
    }
  });
  if (need_to_create) {
    var html = deliverableTemplate({ current_user: currentUser, deliverable: deliverable });
    $("#htk-details").append($(html));
  }
}
function createDeliverable() {
  var form = $(this).parent();
  if (form.find("input[name=title]").val()) {
    var matches = htkGetContentMatches().concat(form.formToNameValues());
    htkLog("createDeliverable: " + JSON.stringify(matches));
    htkRequest("POST", "/api/v1/deliverables", matches, function(obj) {
      var rc = "";
      if (obj.rc) rc = obj.rc;
      if (rc == 200) {
        htkLog("Created new deliverable: " + JSON.stringify(obj.data))
        form.resetForm();
        var nd = parseDeliverablesJson(obj)[0];
        $(deliverableLiTemplate({ deliverable: nd })).insertBefore($("#htk-action-nd"));
        showDeliverable(nd);
        adjust_window_height();
      } else {
        htkStatusMsg.empty().append("Create deliverable failed.");
        adjust_window_height();
        htkLog("Create deliverable response: " + JSON.stringify(obj));
      }
    });
  }
}
function updateDeliverable(deliverable_id, form) {
  var nameValues = form.formToNameValues();
  htkLog("updating deliverable " + deliverable_id + " with " + JSON.stringify(nameValues));
  htkRequest("PUT", "/api/v1/deliverables/" + deliverable_id, nameValues, function(obj) {
    var rc = "";
    if (obj.rc) rc = obj.rc;
    if (rc == 200) {
      htkLog("Putting deliverable succeeded");
      var deliverable = getDeliverable(deliverable_id);
      deliverable.update_attributes(nameValues);
      $(".htk-show[data-id=" + deliverable_id + "]").remove();
      showDeliverable(deliverable);
    } else {
      htkLog("Updating deliverable failed");
    }
  });
}
function deleteDeliverable(deliverable_id) {
  htkRequest("DELETE", "/api/v1/deliverables/" + deliverable_id, null, function(obj) {
    var rc = "";
    if (obj.rc) rc = obj.rc;
    if (rc == 200) {
      htkLog("Delete deliverable succeeded");
      removeDeliverable(deliverable_id);
      showDeliverable();
    } else {
      log("Deleting comment failed");
    }
  });
}
function removeDeliverable(deliverable_id) {
  for (var i=0; i < currentDeliverables.length; i++) {
    var deliverable = currentDeliverables[i];
    if (deliverable.id == deliverable_id) currentDeliverables.splice(i,1)
  }
  $("#htk-dlist").find("li[data-id=" + deliverable_id + "]").remove();
  $(".htk-show > div[data-id=" + deliverable_id + "]").remove();
}
