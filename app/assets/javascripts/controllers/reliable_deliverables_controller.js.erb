function ReliableDeliverablesController() {
  HtkController.call(this, ReliableDeliverablesRouter.prototype.instance);
  this.query = new HtkModel();
}

ReliableDeliverablesController.prototype = Object.create(HtkController.prototype);

ReliableDeliverablesController.prototype.setupEvents = function() {
  // User.prototype.all(null, {
  //   success : function(results) {
  //     var assigned = new Object();
  //     if (_this.deliverable) {
  //       _.each(_this.deliverable.responsible_users, function(du) { assigned[du.user_id] = true; });           
  //     }
  //     var options = $(HandlebarsTemplates['users/options']({assigned: assigned,  users: results.users}));
  //     var select = edit_form.find("select[name=assigned_users]");
  //     select.empty().append(options);
  //     select.multiselect({
  //       selectedText: selectedText,
  //       noneSelectedText: noneSelectedText
  //     });//.multiselectfilter();
  //   }
  // });

}

ReliableDeliverablesController.prototype.loadController = function() {
  var _this = this;
  this.container = $("#rdbls");
  this.container.empty().append($(HandlebarsTemplates['reliable_deliverables/index']()));
  this.deliverablesList = this.container.find(".deliverables-list");
  this.filterForm = this.container.find("form").change(function() {
    _this.getDeliverables();
  });
  this.query.bindForm(this.filterForm, "Reliable Form");
  // this.query.set('type', <%= DeliverableTypeConfig.standard.id %>);
  this.query.set('responsible', true);
  this.query.set('responsible_user_id', this.getCurrentUser().id);
  var joiner = new HtkJoiner();
  User.prototype.all(null, {
    success : function(results) {
      var options = HandlebarsTemplates['users/single_select']({selected_user: _this.query.responsible_user_id, users: results.users});
      _this.filterForm.find("select[name=responsible_user_id]").empty().append($(options));
    },
    joiner : joiner
  });
  DeliverableType.prototype.all(null, {
    success : function(results) {
      var options = HandlebarsTemplates["deliverable_types/single_select"]({selected: _this.query.type, deliverable_types: results.deliverable_types});
      _this.filterForm.find("select[name=type]").empty().append($(options));
    },
    joiner : joiner
  })
  joiner.join(function() { _this.getDeliverables(); });
}

ReliableDeliverablesController.prototype.getDeliverables = function() {
  var _this = this;
  this.deliverablesList.empty().append("<p>Loading...</p>");
  // this.query.type = this.filterForm.find("select[")
  Deliverable.prototype.all(this.query.toObject(), {
    success : function(results) {
      // var deliverables = _.select(results.deliverables, function(d) { return d.deliverable_type_id == _this.query.type; })
      var deliverables = results.deliverables;
      htkLog("Loaded " + deliverables.length + " deliverables");
      var table = $(HandlebarsTemplates['reliable_deliverables/table']());
      _this.deliverablesList.empty().append(table);
      _.each(deliverables, function(d) {
        var row = $(HandlebarsTemplates['reliable_deliverables/row']({ 
          deliverable: d, 
          project: d.getProject(), 
          company: d.getCompany()
        }));
        table.append(row);
      });
    }
  });  
}
